{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport useSWR from \"swr\";\nimport { fetcher } from \"./fetch\";\nexport function useUser(id) {\n  _s();\n\n  const {\n    data,\n    error\n  } = useSWR(`https://api.github.com/repos/vercel/swr/${id}`, fetcher);\n  return {\n    user: data,\n    isLoading: !error && !data,\n    isError: error\n  };\n}\n\n_s(useUser, \"r2QYs02BSrn+Eu/1uMGZi8N+HnQ=\", false, function () {\n  return [useSWR];\n});\n\nexport const GetData = () => {\n  _s2();\n\n  const {\n    data,\n    error\n  } = useSWR(\"https://api.github.com/repos/vercel/swr\", fetcher, {\n    onErrorRetry: (error, key, config, revalidate, _ref) => {\n      let {\n        retryCount\n      } = _ref;\n      // 상태코드가 404라면 더이상 시도하지 않습니다.\n      if (error.status === 404) return; // 최대 10번까지만 시도합니다.\n\n      if (retryCount >= 10) return; // 5초에 한 번 재검증합니다.\n\n      setTimeout(() => revalidate({\n        retryCount\n      }), 5000);\n    }\n  });\n  if (error) return \"[FAIL] get data\";\n  if (!data) return \"[FAIL] no data\";\n  return data;\n};\n\n_s2(GetData, \"r2QYs02BSrn+Eu/1uMGZi8N+HnQ=\", false, function () {\n  return [useSWR];\n});\n\n_c = GetData;\n\nvar _c;\n\n$RefreshReg$(_c, \"GetData\");","map":{"version":3,"names":["useSWR","fetcher","useUser","id","data","error","user","isLoading","isError","GetData","onErrorRetry","key","config","revalidate","retryCount","status","setTimeout"],"sources":["/Users/unitsoft/Desktop/Practice/study/calculator/src/libs/api.js"],"sourcesContent":["import useSWR from \"swr\";\nimport { fetcher } from \"./fetch\";\n\nexport function useUser(id) {\n  const { data, error } = useSWR(\n    `https://api.github.com/repos/vercel/swr/${id}`,\n    fetcher\n  );\n\n  return {\n    user: data,\n    isLoading: !error && !data,\n    isError: error,\n  };\n}\n\nexport const GetData = () => {\n  const { data, error } = useSWR(\n    \"https://api.github.com/repos/vercel/swr\",\n    fetcher,\n    {\n      onErrorRetry: (error, key, config, revalidate, { retryCount }) => {\n        // 상태코드가 404라면 더이상 시도하지 않습니다.\n        if (error.status === 404) return;\n        // 최대 10번까지만 시도합니다.\n        if (retryCount >= 10) return;\n        // 5초에 한 번 재검증합니다.\n        setTimeout(() => revalidate({ retryCount }), 5000);\n      },\n    }\n  );\n\n  if (error) return \"[FAIL] get data\";\n  if (!data) return \"[FAIL] no data\";\n  return data;\n};\n"],"mappings":";;;AAAA,OAAOA,MAAP,MAAmB,KAAnB;AACA,SAASC,OAAT,QAAwB,SAAxB;AAEA,OAAO,SAASC,OAAT,CAAiBC,EAAjB,EAAqB;EAAA;;EAC1B,MAAM;IAAEC,IAAF;IAAQC;EAAR,IAAkBL,MAAM,CAC3B,2CAA0CG,EAAG,EADlB,EAE5BF,OAF4B,CAA9B;EAKA,OAAO;IACLK,IAAI,EAAEF,IADD;IAELG,SAAS,EAAE,CAACF,KAAD,IAAU,CAACD,IAFjB;IAGLI,OAAO,EAAEH;EAHJ,CAAP;AAKD;;GAXeH,O;UACUF,M;;;AAY1B,OAAO,MAAMS,OAAO,GAAG,MAAM;EAAA;;EAC3B,MAAM;IAAEL,IAAF;IAAQC;EAAR,IAAkBL,MAAM,CAC5B,yCAD4B,EAE5BC,OAF4B,EAG5B;IACES,YAAY,EAAE,CAACL,KAAD,EAAQM,GAAR,EAAaC,MAAb,EAAqBC,UAArB,WAAoD;MAAA,IAAnB;QAAEC;MAAF,CAAmB;MAChE;MACA,IAAIT,KAAK,CAACU,MAAN,KAAiB,GAArB,EAA0B,OAFsC,CAGhE;;MACA,IAAID,UAAU,IAAI,EAAlB,EAAsB,OAJ0C,CAKhE;;MACAE,UAAU,CAAC,MAAMH,UAAU,CAAC;QAAEC;MAAF,CAAD,CAAjB,EAAmC,IAAnC,CAAV;IACD;EARH,CAH4B,CAA9B;EAeA,IAAIT,KAAJ,EAAW,OAAO,iBAAP;EACX,IAAI,CAACD,IAAL,EAAW,OAAO,gBAAP;EACX,OAAOA,IAAP;AACD,CAnBM;;IAAMK,O;UACaT,M;;;KADbS,O"},"metadata":{},"sourceType":"module"}